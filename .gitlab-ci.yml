# Node docker image on which this would be run
image: node:latest

variables:
   npm_config_cache: "$CI_PROJECT_DIR/.npm"
   NODE_ENV: 'test'

cache:
   key:
     files:
        - package.json
   paths:
      - .npm
      - node_modules
      - build

services:
   - mongo

stages:
  - install
  - build
  - test
  - staging
  - production

# Jobs:

install_dependencies:
  stage: install
  script:
    - npm  ci
    - npm install grunt --save-dev
    - npm install grunt-coveralls --save-dev
Build_api:
  stage: build
  before_script:
     - npm run clean
  script:
    - npm run build

test_api:
  stage: test
  script:
    - npm test

code_coverage:
  stage: test
  script:
    - grunt coveralls

deploy_staging:
  image: ruby:latest
  stage: staging
  before_script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
  script:  
    - dpl --provider=heroku --app=$HEROKU_APP_NAME_STAGING --api-key=$HEROKU_API_KEY
    - echo "Deployed to staging server"

deploy_prod_manual:
  image: ruby:latest
  only:
    - develop
  stage: production
  before_script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl  
  script:
    - dpl --provider=heroku --app=$HEROKU_APP_NAME_PRODUCTION --api-key=$HEROKU_API_KEY
    - echo "Deploy to production server manually"
  environment:
    name: production
    url: https://agile-ca2-cicd-jgl-production.herokuapp.com/
  when: manual

deploy_prod_auto:
  image: ruby:latest
  only:
    - main
  stage: production
  before_script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl  
  script:
    - dpl --provider=heroku --app=$HEROKU_APP_NAME_PRODUCTION --api-key=$HEROKU_API_KEY
    - echo "Deploy to production server automatically"
  environment:
    name: production
    url: https://agile-ca2-cicd-jgl-production.herokuapp.com/
